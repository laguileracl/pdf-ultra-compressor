#!/usr/bin/env python3
"""
Compresor PDF Ultra-Optimizado
Sistema autom√°tico de compresi√≥n por l√≠nea de comandos
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path
import argparse
import tempfile
import time
from typing import List, Dict, Tuple

class CompresorPDFUltra:
    """Compresor PDF ultra-optimizado usando las mejores herramientas disponibles."""
    
    def __init__(self, carpeta_input: str = "input", carpeta_output: str = "output"):
        self.carpeta_input = Path(carpeta_input)
        self.carpeta_output = Path(carpeta_output)
        
        # Crear carpetas si no existen
        self.carpeta_input.mkdir(exist_ok=True)
        self.carpeta_output.mkdir(exist_ok=True)
        
        print(f"üìÅ Carpeta de entrada: {self.carpeta_input.absolute()}")
        print(f"üìÅ Carpeta de salida: {self.carpeta_output.absolute()}")
    
    def procesar_todos_los_pdfs(self) -> List[Dict]:
        """Procesa todos los PDFs en la carpeta de entrada."""
        pdfs = list(self.carpeta_input.glob("*.pdf"))
        
        if not pdfs:
            print("‚ö†Ô∏è  No se encontraron archivos PDF en la carpeta de entrada")
            return []
        
        print(f"üîç Encontrados {len(pdfs)} archivo(s) PDF para procesar")
        
        resultados = []
        
        for pdf in pdfs:
            print(f"\nüöÄ Procesando: {pdf.name}")
            print("=" * 50)
            
            resultado = self.comprimir_pdf_ultra(pdf)
            resultados.append(resultado)
            
            # Mover archivo procesado a una subcarpeta
            self._mover_archivo_procesado(pdf)
        
        return resultados
    
    def comprimir_pdf_ultra(self, archivo_pdf: Path) -> Dict:
        """Aplica compresi√≥n ultra-optimizada a un PDF."""
        
        tama√±o_original = archivo_pdf.stat().st_size / (1024 * 1024)
        tama√±o_bytes_original = archivo_pdf.stat().st_size
        nombre_salida = self.carpeta_output / f"{archivo_pdf.stem}_ultra_optimizado.pdf"
        
        print(f"üìä Tama√±o original: {tama√±o_original:.2f} MB")
        
        # Lista para guardar todos los intentos de compresi√≥n
        candidatos = []
        
        try:
            # Paso 1: M√∫ltiples intentos con Ghostscript
            archivos_gs = self._comprimir_con_ghostscript_multiple(archivo_pdf)
            candidatos.extend(archivos_gs)
            
            # Paso 2: Optimizaci√≥n con qpdf sobre el original y mejores candidatos
            for candidato in [archivo_pdf] + candidatos[:2]:  # Original + 2 mejores
                archivo_qpdf = self._optimizar_con_qpdf(candidato)
                if archivo_qpdf:
                    candidatos.append(archivo_qpdf)
            
            # Paso 3: PDFtk sobre los mejores candidatos
            for candidato in candidatos[:3]:  # 3 mejores
                archivo_pdftk = self._comprimir_con_pdftk(candidato)
                if archivo_pdftk:
                    candidatos.append(archivo_pdftk)
            
            # Encontrar el mejor resultado (m√°s peque√±o)
            mejor_archivo = self._encontrar_mejor_compresion(archivo_pdf, candidatos)
            
            # Solo proceder si hay mejora real
            if mejor_archivo and mejor_archivo.stat().st_size < tama√±o_bytes_original:
                shutil.copy2(mejor_archivo, nombre_salida)
                tama√±o_final = nombre_salida.stat().st_size / (1024 * 1024)
                reduccion = ((tama√±o_original - tama√±o_final) / tama√±o_original) * 100
                
                print(f"‚úÖ Compresi√≥n exitosa!")
                print(f"üìä Tama√±o final: {tama√±o_final:.2f} MB")
                print(f"üìä Reducci√≥n: {reduccion:.1f}%")
                
            else:
                # Si no hay mejora, copiar el original
                print("‚ö†Ô∏è  Ninguna herramienta logr√≥ reducir el tama√±o")
                print("üìÑ Copiando archivo original (sin cambios)")
                shutil.copy2(archivo_pdf, nombre_salida)
                tama√±o_final = tama√±o_original
                reduccion = 0
            
            # Limpiar archivos temporales
            for temp_file in candidatos:
                if temp_file and temp_file != archivo_pdf and temp_file.exists():
                    try:
                        temp_file.unlink()
                    except:
                        pass  # Ignorar errores de limpieza
            
            resultado = {
                'archivo_original': archivo_pdf.name,
                'archivo_final': nombre_salida.name,
                'tama√±o_original_mb': tama√±o_original,
                'tama√±o_final_mb': tama√±o_final,
                'reduccion_porcentaje': reduccion,
                'herramientas_usadas': self._get_herramientas_disponibles()
            }
            
            print(f"üíæ Guardado como: {nombre_salida.name}")
            
            return resultado
            
        except Exception as e:
            print(f"‚ùå Error procesando {archivo_pdf.name}: {e}")
            return {
                'archivo_original': archivo_pdf.name,
                'error': str(e),
                'tama√±o_original_mb': tama√±o_original
            }
    
    def _comprimir_con_ghostscript_multiple(self, archivo_pdf: Path) -> List[Path]:
        """M√∫ltiples intentos de compresi√≥n con Ghostscript usando diferentes configuraciones."""
        if not shutil.which('gs'):
            print("‚ö†Ô∏è  Ghostscript no disponible, saltando...")
            return []
        
        print("üîß Probando m√∫ltiples configuraciones de Ghostscript...")
        
        candidatos = []
        configuraciones = [
            {
                'nombre': 'alta_calidad (preserva nitidez)',
                'settings': '/printer',
                'color_res': '300',
                'gray_res': '300',
                'mono_res': '600',
                'prioridad': 1  # Mayor prioridad = mejor calidad
            },
            {
                'nombre': 'ebook (equilibrado)',
                'settings': '/ebook',
                'color_res': '200',
                'gray_res': '200',
                'mono_res': '600',
                'prioridad': 2
            },
            {
                'nombre': 'compresion_moderada',
                'settings': '/prepress',
                'color_res': '250',
                'gray_res': '250',
                'mono_res': '800',
                'prioridad': 3
            }
        ]
        
        for i, config in enumerate(configuraciones):
            temp_file = Path(tempfile.mktemp(suffix=f'_gs_{i}.pdf'))
            
            cmd = [
                'gs',
                '-sDEVICE=pdfwrite',
                '-dCompatibilityLevel=1.4',
                f'-dPDFSETTINGS={config["settings"]}',
                '-dNOPAUSE',
                '-dQUIET',
                '-dBATCH',
                f'-dColorImageResolution={config["color_res"]}',
                f'-dGrayImageResolution={config["gray_res"]}',
                f'-dMonoImageResolution={config["mono_res"]}',
                '-dColorImageDownsampleType=/Bicubic',
                '-dGrayImageDownsampleType=/Bicubic',
                '-dMonoImageDownsampleType=/Bicubic',
                '-dColorImageDownsampleThreshold=1.5',  # M√°s conservador
                '-dGrayImageDownsampleThreshold=1.5',   # M√°s conservador
                '-dMonoImageDownsampleThreshold=1.5',   # M√°s conservador
                '-dOptimize=true',
                '-dEmbedAllFonts=true',
                '-dSubsetFonts=true',
                '-dCompressFonts=true',
                '-dDetectDuplicateImages=true',
                '-dPreserveAnnots=true',               # Preservar anotaciones
                '-dPreserveMarkedContent=true',        # Preservar contenido marcado
                '-dDoThumbnails=false',                # No generar miniaturas
                '-dCreateJobTicket=false',             # No crear job ticket
                '-dPreserveHalftoneInfo=true',         # Preservar info de medios tonos
                '-dTransferFunctionInfo=/Preserve',    # Preservar funciones de transferencia
                '-dAutoRotatePages=/None',
                f'-sOutputFile={temp_file}',
                str(archivo_pdf)
            ]
            
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
                if result.returncode == 0 and temp_file.exists():
                    tama√±o_mb = temp_file.stat().st_size / (1024*1024)
                    print(f"  ‚úÖ {config['nombre']}: {tama√±o_mb:.2f} MB")
                    candidatos.append(temp_file)
                else:
                    print(f"  ‚ùå {config['nombre']}: fall√≥")
                    if temp_file.exists():
                        temp_file.unlink()
            except Exception as e:
                print(f"  ‚ùå {config['nombre']}: error - {e}")
                if temp_file.exists():
                    temp_file.unlink()
        
        return candidatos
    
    def _comprimir_con_ghostscript(self, archivo_pdf: Path) -> Path:
        """M√©todo legacy - ahora usa el m√©todo m√∫ltiple."""
        candidatos = self._comprimir_con_ghostscript_multiple(archivo_pdf)
        return candidatos[0] if candidatos else None
    
    def _optimizar_con_qpdf(self, archivo_pdf: Path) -> Path:
        """Optimiza usando qpdf si est√° disponible."""
        if not shutil.which('qpdf'):
            print("‚ö†Ô∏è  qpdf no disponible, saltando...")
            return None
        
        print("üîß Optimizando con qpdf...")
        
        temp_file = Path(tempfile.mktemp(suffix='_qpdf.pdf'))
        
        cmd = [
            'qpdf',
            '--optimize-images',
            '--compress-streams=y',
            '--recompress-flate',
            '--object-streams=generate',
            '--normalize-content=y',
            '--linearize',
            str(archivo_pdf),
            str(temp_file)
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            if result.returncode == 0 and temp_file.exists():
                print(f"‚úÖ qpdf: {temp_file.stat().st_size / (1024*1024):.2f} MB")
                return temp_file
            else:
                print(f"‚ö†Ô∏è  qpdf fall√≥: {result.stderr}")
                if temp_file.exists():
                    temp_file.unlink()
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  qpdf timeout")
            if temp_file.exists():
                temp_file.unlink()
        except Exception as e:
            print(f"‚ö†Ô∏è  Error con qpdf: {e}")
            if temp_file.exists():
                temp_file.unlink()
        
        return None
    
    def _comprimir_con_pdftk(self, archivo_pdf: Path) -> Path:
        """Comprime usando PDFtk si est√° disponible."""
        if not shutil.which('pdftk'):
            print("‚ö†Ô∏è  PDFtk no disponible, saltando...")
            return None
        
        print("üîß Comprimiendo con PDFtk...")
        
        temp_file = Path(tempfile.mktemp(suffix='_pdftk.pdf'))
        
        cmd = [
            'pdftk',
            str(archivo_pdf),
            'output',
            str(temp_file),
            'compress'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            if result.returncode == 0 and temp_file.exists():
                print(f"‚úÖ PDFtk: {temp_file.stat().st_size / (1024*1024):.2f} MB")
                return temp_file
            else:
                print(f"‚ö†Ô∏è  PDFtk fall√≥: {result.stderr}")
                if temp_file.exists():
                    temp_file.unlink()
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  PDFtk timeout")
            if temp_file.exists():
                temp_file.unlink()
        except Exception as e:
            print(f"‚ö†Ô∏è  Error con PDFtk: {e}")
            if temp_file.exists():
                temp_file.unlink()
        
        return None
    
    def _encontrar_mejor_compresion(self, archivo_original: Path, candidatos: List[Path]) -> Path:
        """Encuentra el archivo con mejor balance entre compresi√≥n y calidad."""
        if not candidatos:
            return None
        
        tama√±o_original = archivo_original.stat().st_size
        mejor_archivo = None
        mejor_puntuacion = -1
        
        # Umbrales de calidad
        MIN_REDUCCION_ACEPTABLE = 10  # M√≠nimo 10% de reducci√≥n
        MAX_REDUCCION_AGRESIVA = 70   # M√°ximo 70% (evitar p√©rdida excesiva)
        
        print("üîç Evaluando resultados de compresi√≥n:")
        print(f"   üìÑ Original: {tama√±o_original / (1024*1024):.2f} MB")
        
        for i, candidato in enumerate(candidatos):
            if candidato and candidato.exists():
                tama√±o = candidato.stat().st_size
                reduccion = ((tama√±o_original - tama√±o) / tama√±o_original) * 100
                
                # Calcular puntuaci√≥n basada en balance calidad/compresi√≥n
                if reduccion < MIN_REDUCCION_ACEPTABLE:
                    puntuacion = 0  # Muy poca reducci√≥n
                elif reduccion > MAX_REDUCCION_AGRESIVA:
                    puntuacion = 50 - (reduccion - MAX_REDUCCION_AGRESIVA)  # Penalizar exceso
                else:
                    # Zona √≥ptima: premiar reducci√≥n moderada
                    puntuacion = reduccion + (40 - abs(reduccion - 40))
                
                # Bonificaci√≥n por orden de prioridad (las primeras configuraciones son mejores)
                bonificacion_calidad = max(0, 20 - (i * 5))
                puntuacion_final = puntuacion + bonificacion_calidad
                
                print(f"   üìÑ Candidato {i+1}: {tama√±o / (1024*1024):.2f} MB ({reduccion:+.1f}%) - Puntuaci√≥n: {puntuacion_final:.1f}")
                
                if puntuacion_final > mejor_puntuacion:
                    mejor_puntuacion = puntuacion_final
                    mejor_archivo = candidato
        
        if mejor_archivo:
            tama√±o_final = mejor_archivo.stat().st_size
            reduccion_final = ((tama√±o_original - tama√±o_final) / tama√±o_original) * 100
            print(f"üèÜ Mejor balance: {tama√±o_final / (1024*1024):.2f} MB ({reduccion_final:.1f}% reducci√≥n, puntuaci√≥n: {mejor_puntuacion:.1f})")
        else:
            print("‚ùå Ning√∫n candidato cumple los criterios de calidad")
        
        return mejor_archivo
    
    def _get_herramientas_disponibles(self) -> List[str]:
        """Obtiene lista de herramientas disponibles en el sistema."""
        herramientas = []
        
        if shutil.which('gs'):
            herramientas.append('Ghostscript')
        if shutil.which('qpdf'):
            herramientas.append('qpdf')
        if shutil.which('pdftk'):
            herramientas.append('PDFtk')
        
        return herramientas
    
    def _mover_archivo_procesado(self, archivo_pdf: Path):
        """Mueve el archivo procesado a una subcarpeta."""
        carpeta_procesados = self.carpeta_input / "procesados"
        carpeta_procesados.mkdir(exist_ok=True)
        
        destino = carpeta_procesados / archivo_pdf.name
        shutil.move(str(archivo_pdf), str(destino))
        print(f"üìÅ Archivo movido a: {destino}")
    
    def mostrar_resumen(self, resultados: List[Dict]):
        """Muestra un resumen de todos los procesamientos."""
        if not resultados:
            return
        
        print("\n" + "="*60)
        print("üìä RESUMEN DE COMPRESI√ìN")
        print("="*60)
        
        total_original = 0
        total_final = 0
        exitosos = 0
        
        for resultado in resultados:
            if 'error' not in resultado:
                exitosos += 1
                total_original += resultado['tama√±o_original_mb']
                total_final += resultado['tama√±o_final_mb']
                
                print(f"‚úÖ {resultado['archivo_original']}")
                print(f"   {resultado['tama√±o_original_mb']:.2f} MB ‚Üí {resultado['tama√±o_final_mb']:.2f} MB ({resultado['reduccion_porcentaje']:.1f}% reducci√≥n)")
            else:
                print(f"‚ùå {resultado['archivo_original']}: {resultado['error']}")
        
        if exitosos > 0:
            reduccion_total = ((total_original - total_final) / total_original) * 100
            print(f"\nüéØ TOTALES:")
            print(f"   Archivos procesados: {exitosos}/{len(resultados)}")
            print(f"   Tama√±o total original: {total_original:.2f} MB")
            print(f"   Tama√±o total final: {total_final:.2f} MB")
            print(f"   Reducci√≥n total: {reduccion_total:.1f}%")
            print(f"   Espacio ahorrado: {total_original - total_final:.2f} MB")

def main():
    parser = argparse.ArgumentParser(description='Compresor PDF Ultra-Optimizado')
    parser.add_argument('--input', '-i', default='input', 
                       help='Carpeta de entrada (default: input)')
    parser.add_argument('--output', '-o', default='output',
                       help='Carpeta de salida (default: output)')
    parser.add_argument('--check-tools', action='store_true',
                       help='Verificar herramientas disponibles')
    
    args = parser.parse_args()
    
    print("üöÄ COMPRESOR PDF ULTRA-OPTIMIZADO")
    print("="*50)
    
    compresor = CompresorPDFUltra(args.input, args.output)
    
    if args.check_tools:
        herramientas = compresor._get_herramientas_disponibles()
        print(f"üîß Herramientas disponibles: {', '.join(herramientas) if herramientas else 'Ninguna'}")
        
        if not herramientas:
            print("\nüí° Para obtener mejor compresi√≥n, instala estas herramientas:")
            print("   ‚Ä¢ Ghostscript: brew install ghostscript (macOS)")
            print("   ‚Ä¢ qpdf: brew install qpdf (macOS)")
            print("   ‚Ä¢ PDFtk: brew install pdftk-java (macOS)")
        
        return
    
    try:
        resultados = compresor.procesar_todos_los_pdfs()
        compresor.mostrar_resumen(resultados)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main()
